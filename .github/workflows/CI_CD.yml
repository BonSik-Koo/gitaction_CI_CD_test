name: CI/CD

# push, PR 이벤트 발생시 브랜치에서 발생하는 작업
on:
  push:
    branches:
      - main
      - develop
      
permissions:
  contents: read  

# 실행할 작업들
jobs:
  CI-CD:
    #NCP Server 스펙을 최대한 맞추기 위해서
    runs-on: ubuntu-18.04
    
    steps:
    #JDK setting
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
  
    #dev, prod 환경에 맞는 .yml 생성
    # create application-dev.yml
    - name: make application-dev.yml
      if: contains(github.ref, 'develop') # branch가 develop인 경우
      run: |
        #spring resources 경로로 이동
        cd ./src/main/resources
        
    #application-dev.yml 파일 생성
        touch ./application-dev.yml
        
    #GitHub-Actions에 설정한 값을 application-dev.yml 파일에 쓰기
        echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml
      shell: bash
      
    # create application-prod.yml
    - name: application-prod.yml
      if: contains(github.ref, 'main')  # branch가 main인 경우
      run: |
    # spring resources 경로로 이동
        cd ./src/main/resources
        
        #application-dev.yml 파일 생성
        touch ./application-prod.yml
        
    # GitHub-Actions에 설정한 값을 application-dev.yml 파일에 쓰기
        echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.yml
      shell: bash
      
    # Gradle 권한 부여
    - name: Grant Execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    # dev, man branch Gradle test 진행
    - name: Develop Test # develop branch test
      if: contains(github.ref, 'develop')
      run: SPRING_PROFILES_ACTIVE=[dev] ./gradlew clean test
      shell: bash
    
    - name: Main Test # main branch test
      if: contains(github.ref, 'main')
      run: SPRING_PROFILES_ACTIVE=[prod] ./gradlew clean test
      shell: bash
      
    # gradlew build(test 없이)
    - name: Build with Gradle
      run: ./gradlew build -x test
      shell: bash
    
    # docker build & push
    - name: Docker build & push to dev # 개발 서버용(develop) Docker build & push
      if: contains(github.ref, 'develop')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dokerfile-dev -t ${{ secrets.DOCKER_REPO }}/zzanz-dev .
        docker push ${{ secrets.DOCKER_REPO }}/zzanz-dev
        
    - name: Docker build & push to prod # 운영 서버용(prod) Docker build & push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dokerfile-prod -t ${{ secrets.DOCKER_REPO }}/zzanz-prod .
        docker push ${{ secrets.DOCKER_REPO }}/zzanz-prod
    
    # SSH 접속 및 배포
    # deploy to develop
    - name: Deploy to Develop
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.DEV_SERVER_IP }}
        username: ${{ secrets.DEV_SERVER_USER }}
        password: ${{ secrets.DEV_SERVER_PASSWORD }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker rm -f $(docker ps -q -a)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/zzanz-dev
          docker-compose up -d
          docker image prune -f
    
    # deploy to prod
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.PROD_SERVER_IP }}
        username: ${{ secrets.PROD_SERVER_USER }}
        password: ${{ secrets.PROD_SERVER_PASSWORD }}
        port: ${{ secrets.PROD_SERVER_PORT }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker rm -f $(docker ps -q -a)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/zzanz-prod
          docker-compose up -d
          docker image prune -f
          
